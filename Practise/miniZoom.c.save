
#include"imageHeader.h"
int main()
{
	BGR *temp,*adj1,*adj2;
	unsigned int i,j,zi = 0,zj = 0;
	int width = 4,height = 4,k = 3;
	int imageDataSize = 48,bmpFileSize = 102,offset = 54;
	int zwidth,zheight,padding = 0;
	char *str = (char*)malloc(bmpFileSize - offset);
	FILE *f = fopen("/home/econsys4/Reshma/Files/image.txt","r");
	if(!f)
	{
		printf("File cannot be opened\n");
		return 0;
	}
	fread(str,1,48,f);
	fclose(f);
	zwidth = (k*(width -1)) + 1;
	zheight = (k * (height - 1) + 1);
	printf("Zheight: %d Zwidth: %d\n",zheight,zwidth);
	if((zwidth * BPP) % PADDING != ZERO)
	{
		padding = PADDING - (zwidth * BPP) % PADDING;
	}
	char *zoom = (char*)calloc((zheight*((zwidth * BPP) + padding)),1);
	BGR **in = (BGR**)malloc(sizeof(BGR*) * height);
	BGR** out = (BGR**)malloc(sizeof(BGR*) * zheight);
	for(i=0;i<height;i++)
	{
		*(in+i) = (BGR*)(str + (i * (width * BPP)));
	}
	for(i=0;i<zheight;i++)
	{
		*(out+i) = (BGR*)(zoom + (i * (padding + (zwidth * BPP))));
	}
	for(i=0;i<height;i++)
	{
		zj = 0;
		for(j=0;j<width;j++)
		{
			(*(out+zi) + zj)->blue = (*(in+i) + j)->blue;
			(*(out+zi) + zj)->green = (*(in+i) + j)->green;
			(*(out+zi) + zj)->red = (*(in+i) + j)->red;
			zj += k;
		}
		zi += k;
	}
        for(i=0;i<zheight;i = i+k)
        {
                temp = *(out+i);
                for(j=k;j<zwidth;j = j+k)
                {
                        //printf("\nleft\n");
                        //fprintf(f,"i: %d j: %d ",i,j);
                        adj1 = temp;          //Left Adjacent pixel
                        adj2 = *(out+i)+j;    //Right Adjacent pixel
                        setZoomPixels(out,k,i,j-k,ROW,adj1,adj2);
                        //printf("\nright\n");
                        temp = adj2;
                }
        }

        for(j=0;j<zwidth;j++)
        {
                temp = *(out)+j;
                for(i=k;i<zheight;i = i+k)
                {
                        //fprintf(f,"i: %d j: %d ",i,j);
                        adj1 = temp;            //Upper Adjacent Pixel
                        adj2 = *(out+i)+j;     //Lower Adjacent Pixel
                        setZoomPixels(out,k,i-k,j,COL,adj1,adj2);
                        temp = adj2;
                        //fprintf(f,".");
                }
                //fprintf(f,"\n");
        }

	f = fopen("/home/econsys4/Reshma/Files/imageop.txt","w");
	for(i=0;i<zheight;i++)
	{
		for(j=0;j<((zwidth*BPP)+padding);j++)
		{
			fprintf(f,"%x ",*(zoom+((i * ((zwidth*BPP)+padding)) + j)));
		}
		fprintf(f,"\n");
	}
	fclose(f);

}



void setZoomPixels(BGR** zoom,int k,int row,int col,int flag,BGR* adj1,BGR* adj2)
{
	unsigned int i;
	unsigned char op,value;
	char *str = NULL;
	str = (char*)malloc(k-1);
//	printf("k-1: %d\n",k-1);
	if(str != NULL)
	{
		printf("Malloc Success\n");
	}
	if(adj1->blue > adj2->blue)
	{
		op = adj1->blue - adj2->blue;
		value = (op/k) + adj2->blue;
		printf("\n1.%d %d %d ",adj1->blue,value,adj2->blue);
	}
	else
	{
                op = adj2->blue - adj1->blue;
                value = (op/k) + adj1->blue;
                printf("\n2.%d %d %d ",adj1->blue,value,adj2->blue);

	}
	printf("\nValue:");
	for(i=0;i<k-1;i++)
	{
		printf("%d ",value);
		*(str+i) = value;
		value += op;
	}
	if(adj1->blue > adj2->blue)
	{
		stringReverse(str,k-1);
	}
	if(flag == ROW)
	{
		for(i=1;i<k;i++)
		{
			(*(zoom+row)+col+i)->blue = *(str+i-1);
		}
	}
	else
	{
		for(i=1;i<k;i++)
                {
                        (*(zoom+row+i)+col)->blue = *(str+i-1);
                }
	}

        if(adj1->green > adj2->green)
        {
                op = adj1->green - adj2->green;
                value = (op/k) + adj2->green;
        }
        else
        {
                op = adj2->green - adj1->green;
                value = (op/k) + adj1->green;

        }
	for(i=0;i<k-1;i++)
	{
		printf("%d ",value);
		*(str+i) = value;
		value += op;
	}
	printf("\n");
        if(adj1->green > adj2->green)
        {
                stringReverse(str,k-1);
        }
        if(flag == ROW)
        {
                for(i=1;i<k;i++)
                {
                        (*(zoom+row)+col+i)->green = *(str+i-1);
                }
        }
        else
        {
                for(i=1;i<k;i++)
                {
                        (*(zoom+row+i)+col)->green = *(str+i-1);
                }
        }

        if(adj1->red > adj2->red)
        {
                op = adj1->red - adj2->red;
                value = (op/k) + adj2->red;
        }
        else
        {
                op = adj2->red - adj1->red;
                value = (op/k) + adj1->red;

        }
	printf("\nValue:");
	for(i=0;i<k-1;i++)
	{
		printf("%d ",value);
		*(str+i) = value;
		value += op;
	}
	printf("\n");
        if(adj1->red > adj2->red)
        {
                stringReverse(str,k-1);
        }
        if(flag == ROW)
        {
                for(i=1;i<k;i++)
                {
                        (*(zoom+row)+col+i)->red = *(str+i-1);
                }
        }
        else
        {
                for(i=1;i<k;i++)
                {
                        (*(zoom+row+i)+col)->red = *(str+i-1);
                }
        }
        free(str);
        str = NULL;

}



void stringReverse(char* str,int n)
{
        int i = 0;
        char ch;
        while(i < (n/2))
        {
                ch = *(str+i);
                *(str+i) = *(str-i-1+n);
                *(str-i-1+n) = ch;
                i++;
        }

}




int string_to_number(char* str)
{
	if(string_length(str) == 0)
	{
	return 1;
	}
	if(string_length(str) == 1)
	{
		if(*(str) == '+')
		{
			return 1;
		}
		else if(*(str) == '-')
		{
			return -1;
		}
	}
	int index = 0,number = 0,flag = 0;
	if(*(str) == '-' || *(str) == '+')
	{
		index = 1;
		if(*(str) == '-')
		{
			flag = 1;
		}
	}

	while(*(str+index) !='\0')
	{
		number = (number*10) + (*(str+index)-48);
		index++;
	}

	if(flag)
	{
		number *= -1;
	}

	return number;

}

int string_length(char* str)
{
	int length = 0;
	while(str[length] != '\0')
	{
		length++;
	}
	return length;
}

